{"version":3,"file":"static/js/231.f9ec53a5.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Profile/Posts/Post/Post.module.css?59e2","components/Profile/Posts/Post/Post.tsx","webpack://social-network/./src/components/Profile/Posts/Posts.module.css?138f","components/Profile/Posts/Posts.tsx","webpack://social-network/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","webpack://social-network/./src/components/Profile/ProfileInfo/Status/Status.module.css?fbef","components/Profile/ProfileInfo/Status/Status.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","webpack://social-network/./src/components/common/Button/Button.module.css?9e52","components/common/Button/Button.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__biyGO\"};","import styles from \"./Post.module.css\";\r\n\r\ntype PropsType = {\r\n  text: string;\r\n  likesCount: number;\r\n};\r\n\r\nexport function Post(props: PropsType) {\r\n  return (\r\n    <li className={styles.post}>\r\n      <img\r\n        src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQUs88c7rnLrdFSbs_JBfIqfiKn8z3N67DSqw&usqp=CAU\"\r\n        alt=\"Avatar\"\r\n      />\r\n      <p>{props.text}</p>\r\n      <div>üëç {props.likesCount}</div>\r\n    </li>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"posts\":\"Posts_posts__q9O6Z\"};","import { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\nimport { formValidators } from \"../../../utils/form-validators\";\r\nimport { Button } from \"../../common/Button/Button\";\r\nimport { FormControl } from \"../../common/FormControl/FormControl\";\r\nimport { Post } from \"./Post/Post\";\r\nimport styles from \"./Posts.module.css\";\r\n\r\ntype FormDataType = {\r\n  newPostText: string;\r\n};\r\n\r\ntype PropsType = {\r\n  posts: AppStateType[\"profilePage\"][\"posts\"];\r\n  addPost: (newPostText: string) => void;\r\n};\r\n\r\nconst PostForm = (props: InjectedFormProps<FormDataType>) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        name=\"newPostText\"\r\n        placeholder=\"Type text here...\"\r\n        component={FormControl}\r\n        componentType=\"textarea\"\r\n        validate={[formValidators.required]}\r\n      ></Field>\r\n      <Button>Add post</Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ReduxPostForm = reduxForm<FormDataType>({\r\n  form: \"post\",\r\n})(PostForm);\r\n\r\nexport function Posts(props: PropsType) {\r\n  const postsElements = props.posts.map((post) => (\r\n    <Post key={post.id} text={post.text} likesCount={post.likesCount} />\r\n  ));\r\n\r\n  const onAddPostClickHandler = (formData: FormDataType) => {\r\n    props.addPost(formData.newPostText);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.posts}>\r\n      <h2>My posts</h2>\r\n      <ReduxPostForm onSubmit={onAddPostClickHandler} />\r\n\r\n      <ul>{postsElements}</ul>\r\n    </div>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"userInfo\":\"ProfileInfo_userInfo__Fjbwu\",\"status\":\"ProfileInfo_status__vJyZc\",\"fullName\":\"ProfileInfo_fullName__a-o1e\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Status_container__EM7YR\"};","import { ChangeEvent, KeyboardEvent, useEffect, useState } from \"react\";\r\nimport styles from \"./Status.module.css\";\r\n\r\ntype PropsType = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n> & {\r\n  statusText: null | string;\r\n  setStatus: (status: string) => void;\r\n};\r\n\r\nexport const Status = (props: PropsType) => {\r\n  const [status, setStatus] = useState(props.statusText);\r\n  const [isEditMode, setIsEditMode] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setStatus((prevState) =>\r\n      props.statusText !== prevState ? props.statusText : prevState\r\n    );\r\n  }, [props.statusText]);\r\n\r\n  const toggleEditMode = () => {\r\n    isEditMode && props.setStatus(status || \"\");\r\n    setIsEditMode(!isEditMode);\r\n  };\r\n\r\n  const handleChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setStatus(e.currentTarget.value);\r\n  };\r\n\r\n  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    e.code === \"Enter\" && toggleEditMode();\r\n  };\r\n\r\n  const className = [\r\n    styles.container,\r\n    ...(props.className ? [props.className] : []),\r\n  ].join(\" \");\r\n\r\n  return (\r\n    <div className={className}>\r\n      {!isEditMode && (\r\n        <span onDoubleClick={toggleEditMode}>\r\n          {props.statusText || \"-----\"}\r\n        </span>\r\n      )}\r\n      {isEditMode && (\r\n        <input\r\n          onBlur={toggleEditMode}\r\n          onChange={handleChangeStatus}\r\n          onKeyPress={handleKeyPress}\r\n          autoFocus\r\n          type=\"text\"\r\n          value={status || \"\"}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { AppStateType } from \"../../../redux/redux-store\";\r\nimport { Preloader } from \"../../common/Preloader/Preloader\";\r\nimport styles from \"./ProfileInfo.module.css\";\r\nimport mockUserpic from \"../../../assets/images/mock-userpic.jpg\";\r\nimport { Status } from \"./Status/Status\";\r\n\r\ntype PropsType = {\r\n  profile: AppStateType[\"profilePage\"][\"profile\"];\r\n  status: AppStateType[\"profilePage\"][\"status\"];\r\n  setStatus: (status: string) => void;\r\n};\r\n\r\nexport function ProfileInfo(props: PropsType) {\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const contacts = Object.entries(props.profile.contacts).filter(\r\n    ([, contactValue]) => contactValue\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div className={styles.userInfo}>\r\n        <img src={props.profile.photos.small || mockUserpic} alt=\"Userpic\" />\r\n        <div>\r\n          <h1 className={styles.fullName}>{props.profile.fullName}</h1>\r\n          <Status\r\n            statusText={props.status}\r\n            className={styles.status}\r\n            setStatus={props.setStatus}\r\n          />\r\n          <ul>\r\n            <li>\r\n              <b>About me</b>: {props.profile.aboutMe}\r\n            </li>\r\n            {!!contacts.length &&\r\n              contacts.map(([contactName, contactValue]) => (\r\n                <li key={contactName}>\r\n                  <>\r\n                    <b>{contactName}</b>: {contactValue}\r\n                  </>\r\n                </li>\r\n              ))}\r\n            <li>\r\n              <b>Looking for a job</b>:{\" \"}\r\n              {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </li>\r\n            <li>\r\n              <b>Looking for a job description</b>:{\" \"}\r\n              {props.profile.lookingForAJobDescription}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { AppStateType } from \"../../redux/redux-store\";\r\nimport { Posts } from \"./Posts/Posts\";\r\nimport { ProfileInfo } from \"./ProfileInfo/ProfileInfo\";\r\n\r\ntype PropsType = {\r\n  posts: AppStateType[\"profilePage\"][\"posts\"];\r\n  profile: AppStateType[\"profilePage\"][\"profile\"];\r\n  status: AppStateType[\"profilePage\"][\"status\"];\r\n  addPost: (newPostText: string) => void;\r\n  setStatus: (text: string) => void;\r\n};\r\n\r\nexport function Profile(props: PropsType) {\r\n  return (\r\n    <>\r\n      <ProfileInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        setStatus={props.setStatus}\r\n      />\r\n      <Posts posts={props.posts} addPost={props.addPost} />\r\n    </>\r\n  );\r\n}\r\n","import { Component, ComponentType } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { profileActions, profileThunks } from \"../../redux/profile-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { Profile } from \"./Profile\";\r\n\r\nclass ProfileAPIContainer extends Component<\r\n  ConnectedProps<typeof connector> & RouteComponentProps<{ userId: string }>\r\n> {\r\n  componentDidMount() {\r\n    const routeUserId = +this.props.match.params.userId;\r\n    const authId = this.props.authId;\r\n    const userId = routeUserId || authId;\r\n\r\n    if (!userId) {\r\n      this.props.history.push(\"/login\");\r\n      return;\r\n    }\r\n\r\n    this.props.setUserProfile(userId);\r\n    this.props.getUserStatus(userId);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Profile\r\n        posts={this.props.posts}\r\n        addPost={this.props.addPost}\r\n        profile={this.props.profile}\r\n        status={this.props.status}\r\n        setStatus={this.props.setStatus}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (\r\n  state: AppStateType\r\n): AppStateType[\"profilePage\"] & {\r\n  authId: AppStateType[\"auth\"][\"authData\"][\"id\"];\r\n} => ({\r\n  ...state.profilePage,\r\n  authId: state.auth.authData.id,\r\n});\r\n\r\nconst connector = connect(mapStateToProps, {\r\n  ...profileActions,\r\n  ...profileThunks,\r\n});\r\n\r\nexport const ProfileContainer = compose<ComponentType>(\r\n  connector,\r\n  withRouter\r\n)(ProfileAPIContainer);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Button_item__RIjOj\"};","import styles from \"./Button.module.css\";\r\n\r\nexport const Button = ({\r\n  className,\r\n  ...restProps\r\n}: React.DetailedHTMLProps<\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n  HTMLButtonElement\r\n>) => {\r\n  const classNames = [styles.item, ...(className ? [className] : [])].join(\" \");\r\n\r\n  return <button className={classNames} {...restProps}></button>;\r\n};\r\n"],"names":["Post","props","className","styles","src","alt","text","likesCount","ReduxPostForm","reduxForm","form","onSubmit","handleSubmit","Field","name","placeholder","component","FormControl","componentType","validate","formValidators","Button","Posts","postsElements","posts","map","post","id","formData","addPost","newPostText","Status","useState","statusText","status","setStatus","isEditMode","setIsEditMode","useEffect","prevState","toggleEditMode","join","onDoubleClick","onBlur","onChange","e","currentTarget","value","onKeyPress","code","autoFocus","type","ProfileInfo","profile","Preloader","contacts","Object","entries","filter","photos","small","mockUserpic","fullName","aboutMe","length","contactName","contactValue","lookingForAJob","lookingForAJobDescription","Profile","ProfileAPIContainer","routeUserId","this","match","params","userId","authId","setUserProfile","getUserStatus","history","push","Component","connector","connect","state","profilePage","auth","authData","profileActions","profileThunks","ProfileContainer","compose","withRouter","restProps","classNames"],"sourceRoot":""}