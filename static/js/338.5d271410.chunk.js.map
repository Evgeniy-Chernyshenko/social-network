{"version":3,"file":"static/js/338.5d271410.chunk.js","mappings":"sUACA,EAA4B,8BAA5B,EAAmE,2BCO5D,SAASA,EAAWC,GACzB,OACE,gBAAIC,UAAWC,EAAf,WACE,gBAAKC,IAAKH,EAAMI,KAAKC,QAASC,IAAKN,EAAMI,KAAKG,QAC9C,SAAC,KAAD,CAASC,GAAE,mBAAcR,EAAMI,KAAKK,IAAMC,gBAAiBR,EAA3D,SACGF,EAAMI,KAAKG,SAInB,CChBD,OAAgB,QAAU,yBAAyB,MAAQ,uBAAuB,cAAgB,gCCAlG,EAA4B,+BCMrB,SAASI,EAAYX,GAC1B,OACE,iBAAKC,UAAWC,EAAhB,WACE,gBAAKC,IAAKH,EAAMY,QAAQP,QAASC,IAAKN,EAAMY,QAAQC,YACpD,uBAAIb,EAAMY,QAAQE,SAGvB,CCDD,IAAMC,EAAwBC,EAAAA,EAAAA,UAAyB,KAiBjDC,GAAkBC,EAAAA,EAAAA,GAAwB,CAC9CC,KAAM,UADgBD,EAfL,SAAClB,GAClB,OACE,kBAAMoB,SAAUpB,EAAMqB,aAAtB,WACE,SAACC,EAAA,EAAD,CACEC,YAAY,oBACZhB,KAAK,iBACLiB,UAAWC,EAAAA,EACXC,cAAc,WACdC,SAAU,CAACX,EAAAA,EAAAA,SAAyBD,MAEtC,SAACa,EAAA,EAAD,6BAGL,ICTD,IAYMC,GAAYC,EAAAA,EAAAA,KAZM,SAACC,GAAD,MAAqD,CAC3EC,YAAaD,EAAMC,YADG,IAIG,SACzBC,GADyB,MAES,CAClCC,mBAAoB,SAACC,GACnBF,EAASG,EAAAA,EAAAA,aAA4BD,GACtC,EALwB,IAUdE,GAAmBC,EAAAA,EAAAA,IAC9BT,GC7B8B,SAAKU,GAmBnC,OAFkBT,EAAAA,EAAAA,KAJM,SAACC,GACvB,MAAO,CAAES,SAAUT,EAAMU,KAAKC,SAASjC,GACxC,GAIMoB,EAlB2B,SAAC,GAIM,IAHvCW,EAGsC,EAHtCA,OAEGG,GACmC,EAFtCV,UAEsC,aACtC,OAAKO,GAIE,SAACD,GAAD,UAAgBI,KAHd,SAAC,KAAD,CAAUnC,GAAI,UAIxB,GASF,GDQ+B8B,EDCzB,SAAiBtC,GACtB,IAAM4C,EAAc5C,EAAMgC,YAAYa,MAAMC,KAAI,SAAC1C,GAAD,OAC9C,SAACL,EAAD,CAA0BK,KAAMA,GAAfA,EAAKK,GADwB,IAG1CsC,EAAe/C,EAAMgC,YAAYgB,SAASF,KAAI,SAAClC,GAAD,OAClD,SAACD,EAAD,CAA8BC,QAASA,GAArBA,EAAQH,GADwB,IAQpD,OACE,iBAAKR,UAAWC,EAAAA,QAAhB,WACE,eAAID,UAAWC,EAAAA,MAAf,SAA8B0C,KAC9B,iBAAK3C,UAAWC,EAAAA,SAAhB,WACE,gBAAKD,UAAWC,EAAAA,cAAhB,SAAuC6C,KACvC,SAAC9B,EAAD,CAAiBG,SATU,SAAC6B,GAChCjD,EAAMkC,mBAAmBe,EAASd,eACnC,SAWF,G,yFGtDD,GAAgB,KAAO,sB,yBCCVP,EAAS,SAAC,GAMhB,IALL3B,EAKI,EALJA,UACG0C,GAIC,YACEO,EAAa,CAAChD,EAAAA,MAAD,eAAkBD,EAAY,CAACA,GAAa,KAAKkD,KAAK,KAEzE,OAAO,2BAAQlD,UAAWiD,GAAgBP,GAC3C,C","sources":["webpack://social-network/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://social-network/./src/components/Dialogs/MessageItem/MessageItem.module.css?481d","components/Dialogs/MessageItem/MessageItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx","webpack://social-network/./src/components/common/Button/Button.module.css?9e52","components/common/Button/Button.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"DialogItem_container__EjR9x\",\"active\":\"DialogItem_active__FLO84\"};","import { NavLink } from \"react-router-dom\";\r\nimport { AppStateType } from \"../../../redux/redux-store\";\r\nimport styles from \"./DialogItem.module.css\";\r\n\r\ntype PropsType = {\r\n  user: AppStateType[\"dialogsPage\"][\"users\"][number];\r\n};\r\n\r\nexport function DialogItem(props: PropsType) {\r\n  return (\r\n    <li className={styles.container}>\r\n      <img src={props.user.userPic} alt={props.user.name} />\r\n      <NavLink to={`/dialogs/${props.user.id}`} activeClassName={styles.active}>\r\n        {props.user.name}\r\n      </NavLink>\r\n    </li>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__20-F0\",\"users\":\"Dialogs_users__3k-8L\",\"messagesItems\":\"Dialogs_messagesItems__HGHXi\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MessageItem_container__mbwee\"};","import { AppStateType } from \"../../../redux/redux-store\";\r\nimport styles from \"./MessageItem.module.css\";\r\n\r\ntype PropsType = {\r\n  message: AppStateType[\"dialogsPage\"][\"messages\"][number];\r\n};\r\n\r\nexport function MessageItem(props: PropsType) {\r\n  return (\r\n    <div className={styles.container}>\r\n      <img src={props.message.userPic} alt={props.message.userName} />\r\n      <p>{props.message.text}</p>\r\n    </div>\r\n  );\r\n}\r\n","import { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { formValidators } from \"../../utils/form-validators\";\r\nimport { Button } from \"../common/Button/Button\";\r\nimport { FormControl } from \"../common/FormControl/FormControl\";\r\nimport { DialogItem } from \"./DialogItem/DialogItem\";\r\nimport styles from \"./Dialogs.module.css\";\r\nimport { DialogsPropsType } from \"./DialogsContainer\";\r\nimport { MessageItem } from \"./MessageItem/MessageItem\";\r\n\r\ntype FormDataType = {\r\n  newMessageText: string;\r\n};\r\n\r\nconst maxLength100Validator = formValidators.maxLength(100);\r\n\r\nconst DialogForm = (props: InjectedFormProps<FormDataType>) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        placeholder=\"Type text here...\"\r\n        name=\"newMessageText\"\r\n        component={FormControl}\r\n        componentType=\"textarea\"\r\n        validate={[formValidators.required, maxLength100Validator]}\r\n      ></Field>\r\n      <Button>Send message</Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ReduxDialogForm = reduxForm<FormDataType>({\r\n  form: \"dialog\",\r\n})(DialogForm);\r\n\r\nexport function Dialogs(props: DialogsPropsType) {\r\n  const dialogItems = props.dialogsPage.users.map((user) => (\r\n    <DialogItem key={user.id} user={user} />\r\n  ));\r\n  const messageItems = props.dialogsPage.messages.map((message) => (\r\n    <MessageItem key={message.id} message={message} />\r\n  ));\r\n\r\n  const onAddMessageClickHandler = (formData: FormDataType) => {\r\n    props.addMessageCallback(formData.newMessageText);\r\n  };\r\n\r\n  return (\r\n    <div className={styles.dialogs}>\r\n      <ul className={styles.users}>{dialogItems}</ul>\r\n      <div className={styles.messages}>\r\n        <div className={styles.messagesItems}>{messageItems}</div>\r\n        <ReduxDialogForm onSubmit={onAddMessageClickHandler} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { ComponentType } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose, Dispatch } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { dialogsActions } from \"../../redux/dialogs-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { Dialogs } from \"./Dialogs\";\r\n\r\ntype MapStateToPropsReturnType = {\r\n  dialogsPage: AppStateType[\"dialogsPage\"];\r\n};\r\n\r\ntype MapDispatchToPropsReturnType = {\r\n  addMessageCallback: (newMessageText: string) => void;\r\n};\r\n\r\nexport type DialogsPropsType = MapStateToPropsReturnType &\r\n  MapDispatchToPropsReturnType;\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsReturnType => ({\r\n  dialogsPage: state.dialogsPage,\r\n});\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: Dispatch\r\n): MapDispatchToPropsReturnType => ({\r\n  addMessageCallback: (newMessageText) => {\r\n    dispatch(dialogsActions.addMessageAC(newMessageText));\r\n  },\r\n});\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\n\r\nexport const DialogsContainer = compose<ComponentType>(\r\n  connector,\r\n  withAuthRedirect\r\n)(Dialogs);\r\n","import { ComponentType } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { Redirect } from \"react-router\";\r\nimport { AppStateType } from \"../redux/redux-store\";\r\n\r\nexport const withAuthRedirect = <T,>(Component: ComponentType<T>) => {\r\n  const ComponentWithAuthRedirect = ({\r\n    isAuth,\r\n    dispatch,\r\n    ...restProps\r\n  }: ConnectedProps<typeof connector>) => {\r\n    if (!isAuth) {\r\n      return <Redirect to={\"/login\"} />;\r\n    }\r\n\r\n    return <Component {...(restProps as T)} />;\r\n  };\r\n\r\n  const mapStateToProps = (state: AppStateType) => {\r\n    return { isAuth: !!state.auth.authData.id };\r\n  };\r\n\r\n  const connector = connect(mapStateToProps);\r\n\r\n  return connector(ComponentWithAuthRedirect);\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Button_item__RIjOj\"};","import styles from \"./Button.module.css\";\r\n\r\nexport const Button = ({\r\n  className,\r\n  ...restProps\r\n}: React.DetailedHTMLProps<\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n  HTMLButtonElement\r\n>) => {\r\n  const classNames = [styles.item, ...(className ? [className] : [])].join(\" \");\r\n\r\n  return <button className={classNames} {...restProps}></button>;\r\n};\r\n"],"names":["DialogItem","props","className","styles","src","user","userPic","alt","name","to","id","activeClassName","MessageItem","message","userName","text","maxLength100Validator","formValidators","ReduxDialogForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","FormControl","componentType","validate","Button","connector","connect","state","dialogsPage","dispatch","addMessageCallback","newMessageText","dialogsActions","DialogsContainer","compose","Component","isAuth","auth","authData","restProps","dialogItems","users","map","messageItems","messages","formData","classNames","join"],"sourceRoot":""}